package servidor;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.util.List;

import pelicula.GestorPeliculas;
import pelicula.Pelicula;

public class ClienteHandler implements Runnable {
    private Socket socketAlCliente;
    private GestorPeliculas gestorPeliculas;
    private Thread hilo;
    private static final Object lock = new Object();
    private static boolean otroClienteIntroduciendoDatos = false;

    public ClienteHandler(Socket socketAlCliente, GestorPeliculas gestorPeliculas) {
        this.socketAlCliente = socketAlCliente;
        this.gestorPeliculas = gestorPeliculas;
        hilo = new Thread(this);
        hilo.start();
    }

    @Override
    public void run() {
        System.out.println("Estableciendo comunicación con " + hilo.getName());
        PrintStream salida = null;
        InputStreamReader entrada = null;
        BufferedReader entradaBuffer = null;
        boolean continuar = true;

        try {
            salida = new PrintStream(socketAlCliente.getOutputStream());
            entrada = new InputStreamReader(socketAlCliente.getInputStream());
            entradaBuffer = new BufferedReader(entrada);

            String texto = "";

            while (continuar) {
                texto = entradaBuffer.readLine();

                switch (texto) {
                    case "1":
                        // Búsqueda por ID
                        System.out.println(hilo.getName() + " Búsqueda por ID");
                        String id = entradaBuffer.readLine();
                        Pelicula peliculaPorID = gestorPeliculas.obtenerPeliculaPorID(id);
                        salida.println(peliculaPorID != null ? peliculaPorID.toString() : "Película no encontrada");
                        break;

                    case "2":
                        // Búsqueda por Título
                        System.out.println(hilo.getName() + " Búsqueda por Título");
                        String titulo = entradaBuffer.readLine();
                        Pelicula peliculaPorTitulo = gestorPeliculas.obtenerPeliculaPorTitulo(titulo);
                        salida.println(peliculaPorTitulo != null ? peliculaPorTitulo.toString() : "Película no encontrada");
                        break;

                    case "3":
                        // Búsqueda por Director
                        System.out.println(hilo.getName() + " Búsqueda por Director");
                        String director = entradaBuffer.readLine();
                        List<Pelicula> peliculasPorDirector = gestorPeliculas.obtenerPeliculasPorDirector(director);

                        for (Pelicula pelicula : peliculasPorDirector) {
                            salida.println(pelicula.toString());
                        }
                        salida.println("FIN");
                        break;

                    case "4":
                        // Añadir película
                        System.out.println(hilo.getName() + " Añadir película");

                        synchronized (lock) {
                            while (otroClienteIntroduciendoDatos) {
                                try {
                                    lock.wait();
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                            otroClienteIntroduciendoDatos = true;
                        }

                        String datosPelicula = entradaBuffer.readLine();
                        String[] datos = datosPelicula.split(",");

                        if (datos.length == 4) {
                            String id1 = datos[0].trim();
                            String titulo1 = datos[1].trim();
                            String director1 = datos[2].trim();

                            try {
                                double precio1 = Double.parseDouble(datos[3].trim());

                                gestorPeliculas.agregarPelicula(new Pelicula(id1, titulo1, director1, precio1));
                                salida.println("Película agregada con éxito");
                                System.out.println(this.gestorPeliculas.obtenerPeliculaPorID(id1) + " Añadida por " + hilo.getName());
                            } catch (NumberFormatException e) {
                                salida.println("Error en el formato del precio. Asegúrate de que el precio sea un número válido.");
                            }
                        } else {
                            salida.println("Formato de datos incorrecto. Debe ingresar id, titulo, director y precio separados por comas.");
                        }

                        synchronized (lock) {
                            otroClienteIntroduciendoDatos = false;
                            lock.notify();
                        }
                        break;

                    case "5":
                        System.out.println("Cerrada la comunicación con " + hilo.getName());
                        salida.println("Saliendo de la aplicación...");
                        continuar = false;
                        break;

                    default:
                        System.out.println("Opción no válida.");
                        break;
                }
            }

            socketAlCliente.close();
        } catch (IOException e) {
            System.err.println("Error de entrada/salida");
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Error");
            e.printStackTrace();
        }
    }
}

