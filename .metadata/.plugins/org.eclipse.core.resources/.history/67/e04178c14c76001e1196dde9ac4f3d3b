package servidor;

import pelicula.GestorPeliculas;
import pelicula.Pelicula;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.util.List;

public class ClienteHandler implements Runnable {
    private Socket socketAlCliente;
    private GestorPeliculas gestorPeliculas;
    private Thread hilo;

    public ClienteHandler(Socket socketAlCliente, GestorPeliculas gestorPeliculas) {
        this.socketAlCliente = socketAlCliente;
        this.gestorPeliculas = gestorPeliculas;
        hilo = new Thread(this);
        hilo.start();
    }

    @Override
    public void run() {
        System.out.println("Estableciendo comunicación con " + hilo.getName());
        PrintStream salida = null;
        InputStreamReader entrada = null;
        BufferedReader entradaBuffer = null;

        try {
            salida = new PrintStream(socketAlCliente.getOutputStream());
            entrada = new InputStreamReader(socketAlCliente.getInputStream());
            entradaBuffer = new BufferedReader(entrada);

            String texto = "";
            boolean continuar = true;

            while (continuar) {
                texto = entradaBuffer.readLine();

                if (texto.equalsIgnoreCase("FIN")) {
                    salida.println("OK");
                    System.out.println(hilo.getName() + " ha cerrado la comunicación");
                    continuar = false;
                } else {
                    // Procesa la opción del cliente y llama al método correspondiente de GestorPeliculas
                    switch (texto) {
                        case "1":
                            // El cliente desea buscar por ID
                            String id = entradaBuffer.readLine();
                            Pelicula peliculaPorID = gestorPeliculas.obtenerPeliculaPorID(id);
                            // Envía la respuesta al cliente (puedes personalizar este mensaje)
                            salida.println(peliculaPorID != null ? peliculaPorID.toString() : "Película no encontrada");
                            break;
                        case "2":
                            // El cliente desea buscar por Título
                            String titulo = entradaBuffer.readLine();
                            Pelicula peliculaPorTitulo = gestorPeliculas.obtenerPeliculaPorTitulo(titulo);
                            // Envía la respuesta al cliente
                            salida.println(peliculaPorTitulo != null ? peliculaPorTitulo.toString() : "Película no encontrada");
                            break;
                        case "3":
                            // El cliente desea buscar por Director
                            String director = entradaBuffer.readLine();
                            List<Pelicula> peliculasPorDirector = gestorPeliculas.obtenerPeliculasPorDirector(director);
                            // Envía la respuesta al cliente
                            if (peliculasPorDirector != null) {
                                for (Pelicula pelicula : peliculasPorDirector) {
                                    salida.println(pelicula.toString());
                                }
                            } else {
                                salida.println("Películas no encontradas");
                            }
                            break;
                        case "4":
                            // El cliente desea agregar una película
                            String datosPelicula = entradaBuffer.readLine();
                            // Procesa los datos de la película y agrégala usando el gestor de películas
                            // Puedes personalizar esta parte para analizar y agregar películas.
                            // Luego, envía un mensaje al cliente confirmando la adición.
                            salida.println("Película agregada con éxito");
                            break;
                        case "5":
                            // El cliente quiere salir
                            salida.println("Saliendo de la aplicación...");
                            continuar = false;
                            break;
                        default:
                            System.out.println("Opción no válida.");
                            // Envía un mensaje de error al cliente
                            salida.println("Opción no válida");
                            break;
                    }
                }
            }

            socketAlCliente.close();
        } catch (IOException e) {
            System.err.println("Error de entrada/salida");
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Error");
            e.printStackTrace();
        }
    }
}
